package org.example.array;

import java.util.Arrays;

public class LargestPairSum {
    public static void main(String[] args) {
        int[] arr = {
                9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,
                9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,
                9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,9, -4, 5, -9, 35, 14, 5, -8, -25,
        };
        System.out.println("Largest sum of pair: " + largestSumOfPairKadanes(arr));
        System.out.println("Largest sum of pair: " + largestSumOfPairPrefix(arr));
        System.out.println("Largest sum of pair: " + largestSumOfPair(arr));
    }

    /**
     * Largest sum of integer array
     * , O(n) kadanes method
     */
    public static int largestSumOfPairKadanes(int[] arr) {
        long start = System.currentTimeMillis();
        int maxSum = Integer.MIN_VALUE;
        int cs = 0;
        for (int i = 0; i < arr.length; i++) {
            cs = Math.max(cs+arr[i],0);
            maxSum = Math.max(cs,maxSum);
        }
        long end = System.currentTimeMillis();
        System.out.print("largestSumOfPairKadanes : " + (end - start)+ " : ");
        return maxSum;
    }

    /**
     * Largest sum of pair of integer array
     * ,O(n^2) prefix method
     */
    public static int largestSumOfPairPrefix(int[] arr) {
        long start = System.currentTimeMillis();
        int[] prefixArray = new int[arr.length];
        prefixArray[0] = arr[0];
        for (int i = 1; i < arr.length; i++) {
            prefixArray[i] = prefixArray[i - 1] + arr[i];
        }
        int largest = Integer.MIN_VALUE;
        for (int i = 0; i < prefixArray.length; i++) {
            for (int j = i; j < prefixArray.length; j++) {
                int sum = prefixArray[j] - (i != 0 ? prefixArray[i - 1] : 0);
                largest = Math.max(sum,largest);
            }
        }
        long end = System.currentTimeMillis();
        System.out.print("largestSumOfPairPrefix : " + (end - start)+ " : ");
        return largest;
    }

    /**
     * Largest sum of pair of integer array
     * ,O(n^3) normal method
     */
    public static int largestSumOfPair(int[] arr) {
        long start = System.currentTimeMillis();
        int largest = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                int sum = 0;
                for (int k = i; k <= j; k++) {
                    sum += arr[k];
                }
                if (largest < sum) largest = sum;
            }
        }
        long end = System.currentTimeMillis();
        System.out.print("largestSumOfPair : " + (end - start)+ " : ");
        return largest;
    }
}
